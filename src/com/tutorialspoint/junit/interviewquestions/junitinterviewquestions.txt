What is Testing?

Testing is the process of checking the functionality of the application whether 
it is working as per requirements.


What is Unit Testing? 

Unit testing is the testing of single entity (class or method). Unit testing is 
very essential to every software company to give a quality product to their 
customers.


What is Manual Testing? 

Executing the test cases manually without any tool support is known as manual 
testing. 


What is Automated Testing? 

Taking tool support and executing test cases by using automation tool is known
as automated testing. 


What are the disadvantages of manual testing? 

- Time consuming and tedious 
- Huge investment in human resources 
- Less reliable 
- Non-programmable


What are advantages of automated testing? 

- Fast
- Less investment in human resources 
- More reliable 
- Programmable 


What is JUnit? 

JUnit is regression testing framework used by developers to implement unit testing
in Java and accelerate programming speed and increase the quality of code. 


What are important features of JUnit? 

- It is an open source framework 
- Provides Annotation to identify the test methods. 
- Provides Assertions for testing expected results. 
- Provides Test runners for running tests. 
- JUnit tests can be run automatically and they check their own results and 
provide immediate feedback 
- JUnit tests can be organized into test suites containing test cases and even
other test suites. 
- JUnit shows test progress in a bar that is green if test is going fine and it
turns red when a test fails. 


What is a Unit Test Case? 

A Unit Test Case is a part of code which ensures that the another part of code 
works as expected. To achieve those desired results quickly, test framework is 
required. JUnit is perfect unit test framework for java programming language. 


What are best practices to write a Unit Test Case? 

A formal written unit test case is characterized by a known input an by an 
expected output, which is worked out before the test is executed. The known 
input should test a precondition and the expected output should test a 
postcondition. 
There must be at least two unit cases for each requirement: one positive test
and one negative test. If a requirement has sub-requirements, each sub-requirement
must have at least two test cases as positive and negative. 


When are Unit Tests written in Development Cycle? 

Tests are written before the code during development in order to help coders 
write the best code. 


Why not just use System.out.println() for testing? 

Debugging the code using system.out.println() will lead to manual scanning of the 
whole output every time the program is run to ensure the code is doing expected 
operations. Moreover, in the long run, it takes lesser time to code JUnit methods
and test them on class files. 


Why does JUnit only report the first failure in a single test? 

Reporting multiple failures in a single test is generally a sign that the test 
does too much and it is too big a unit test. JUnit is designed to work best with 
a number of small tests. It executes each test within a seperate instance of the 
test class. It reports failure on each test. 


What are the core features of JUnit? 

-Fixtures
-Test suites
-Test runners
-JUnit classes


What is a fixture? 

Fixture is a fixed state of a set of objects used as a baseline for running tests.
The purpose of a test fixture is to ensure that there is a well known and fixed 
environment in which tests are run so that results are repeatable.


What is a test suite? 

Test suite means bundle a few unit test cases and run it together. In JUnit, both
@RunWith and @Suite annotation are used to run the suite test. 


What is a test runner? 

Test runner is used for executing the test cases. 


What are JUnit classes? List some of them. 

- Assert: It contains a set of assert methods. 
- TestCase: It contains a test case defines the fixture to run multiple tests. 
- TestResults: I contains methods to collect the results of executing a test case. 
- TestSuite: It is a Composite of Tests. 


What are annotations and how are they useful in JUnit?

Annotations are like meta-tags that you can add to you code and apply them to 
methods or in class. The annotation in JUnit gives us information about test 
methods, which methods are going to run before & after test methods, which 
methods run before & after all the methods, which methods or class will be 
ignore during execution.


What is the purpose of org.junit.Assert class?

This class provides a set of assertion methods useful for writing tests. Only 
failed assertions are recorded.


What is the purpose of org.junit.TestResult class?

A TestResult collects the results of executing a test case. It is an instance 
of the Collecting Parameter pattern. The test framework distinguishes between 
failures and errors. A failure is anticipated and checked for with assertions. 
Errors are unanticipated problems like an ArrayIndexOutOfBoundsException.


What is the purpose of org.junit.TestSuite class?

A TestSuite is a Composite of Tests. It runs a collection of test cases.


What is the purpose of @Test annotation in JUnit?

The Test annotation tells JUnit that the public void method to which it is 
attached can be run as a test case.


What is the purpose of @Before annotation in JUnit?

Several tests need similar objects created before they can run. Annotating a 
public void method with @Before causes that method to be run before each Test
method.


What is the purpose of @After annotation in JUnit?

If you allocate external resources in a Before method you need to release them 
after the test runs. Annotating a public void method with @After causes that 
method to be run after the Test method.


What is the purpose of @BeforeClass annotation in JUnit?

Annotating a public static void method with @BeforeClass causes it to be run once 
before any of the test methods in the class.


What is the purpose of @AfterClass annotation in JUnit?

This will perform the method after all tests have finished. This can be used to 
perform clean-up activities.


What is @Ignore annotation and how is this useful?

You can easily identify all @Ignore annotations in the source code, while 
unannotated or commented out tests are not so simple to find.
There are cases when you can't fix a code that is failing, but you still want to 
method to be around, precisely so that it does not get forgotten. In such cases 
@Ignore makes sense.


Explain the execution procedure of the JUnit test API methods?

First of all method annotated as @BeforeClass execute only once.
Lastly, the method annotated as @AfterClass executes only once.
Method annotated as @Before executes for each test case but before executing the 
test case.
Method annotated as @After executes for each test case but after the execution of 
test case.
In between method annotated as @Before and method annotated as @After each test 
case executes.


What is the purpose of org.junit.JUnitCore class?

The test cases are executed using JUnitCore class. JUnitCore is a facade for 
running tests. It supports running JUnit 4 tests, JUnit 3.8.x tests, and mixtures.


How to simulate timeout situation in JUnit?

Junit provides a handy option of Timeout. If a test case takes more time than 
specified number of milliseconds then Junit will automatically mark it as failed.
The timeout parameter is used along with @Test annotation.


How can you use JUnit to test that the code throws desired exception?

JUnit provides a option of tracing the Exception handling of code. You can test if 
a code throws desired exception or not. The expected parameter is used along with 
@Test annotation as follows âˆ’ @Test(expected)


What are Parameterized tests?

Junit 4 has introduced a new feature Parameterized tests. Parameterized tests 
allow developer to run the same test over and over again using different values.


How to create Parameterized tests?

-Annotate test class with @RunWith(Parameterized.class).
-Create a public static method annotated with @Parameters that returns a 
Collection of Objects (as Array) as test data set.
-Create a public constructor that takes in what is equivalent to one "row" of 
test data.
-Create an instance variable for each "column" of test data.
-Create your tests case(s) using the instance variables as the source of the test 
data.
The test case will be invoked once per each row of data. Let's see Parameterized 
tests in action.


How do you use test fixtures?

Fixtures is a fixed state of a set of objects used as a baseline for running 
tests. The purpose of a test fixture is to ensure that there is a well known and 
fixed environment in which tests are run so that results are repeatable. It 
includes
-setUp() method which runs before every test invocation.
-tearDown() method which runs after every test method.


How to compile a JUnit Test Class?

Compiling a JUnit test class is like compiling any other Java classes. The only 
thing you need watch out is that the JUnit JAR file must be included in the 
classpath.


What happens if a JUnit Test Method is Declared as "private"?

If a JUnit test method is declared as "private", it compiles successfully. But 
the execution will fail. This is because JUnit requires that all test methods 
must be declared as "public".


How do you test a "protected" method?

When a method is declared as "protected", it can only be accessed within the same 
package where the class is defined. Hence to test a "protected" method of a 
target class, define your test class in the same package as the target class.


How do you test a "private" method?

When a method is declared as "private", it can only be accessed within the same 
class. So there is no way to test a "private" method of a target class from any 
test class. Hence you need to perform unit testing manually. Or you have to 
change your method from "private" to "protected".


What happens if a JUnit test method is declared to return "String"?

If a JUnit test method is declared to return "String", the compilation will pass 
ok. But the execution will fail. This is because JUnit requires that all test 
methods must be declared to return "void".


Can you use a main() Method for Unit Testing?

Yes you can test using main() method. One obvious advantage seems to be that you 
can whitebox test the class. That is, you can test the internals of it (private 
methods for example). You can't do that with unit-tests. But primarily the test 
framework tests the interface and the behavior from the user's perspective.


Do you need to write a test class for every class that needs to be tested?

No. We need not write an independent test class for every class that needs to be 
tested. If there is a small group of tests sharing a common test fixture, you may 
move those tests to a new test class.


When are tests garbage collected?

The test runner holds strong references to all Test instances for the duration 
of the test execution. This means that for a very long test run with many Test 
instances, none of the tests may be garbage collected until the end of the entire 
test run. Explicitly setting an object to null in the tearDown() method, for 
example, allows it to be garbage collected before the end of the entire test run.


What is a Mock Object?

In a unit test, mock objects can simulate the behavior of complex, real (non-mock) 
objects and are therefore useful when a real object is impractical or impossible 
to incorporate into a unit test.


Explain unit testing using Mock Objects.

Create instances of mock objects.
Set state and expectations in the mock objects.
Invoke domain code with mock objects as parameters.
Verify consistency in the mock objects.

